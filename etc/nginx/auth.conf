if ($verify_client) {
  set $secure R; # R = Required
}
if ($ssl_client_verify != SUCCESS) {
  set $secure "${secure}F"; # F = Failed
}
if ($secure = RF) {
  return 403;
}

location / {
  auth_request /._auth;
  auth_request_set $user $upstream_http_x_user;
  auth_request_set $domain $upstream_http_x_domain;
  auth_request_set $cookie $upstream_http_x_cookie;
  auth_request_set $downstream $upstream_http_x_downstream;
  auth_request_set $group $upstream_http_x_group;
  proxy_pass_request_headers off;
  proxy_set_header host $host;
  proxy_set_header content-type $content_type;
  proxy_set_header content-length $content_length;
  proxy_set_header referer $http_referer;
  proxy_set_header origin $http_origin;
  proxy_set_header user-agent $http_user_agent;
  proxy_set_header x-user $user;
  proxy_set_header x-domain $domain;
  proxy_set_header x-group $group;
  proxy_set_header cookie $cookie;
  proxy_pass $downstream;
}

location /._auth {
  proxy_pass http://[::1]:9090/auth?d=$host;
  proxy_set_header Authorization $http_cookie;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_pass_request_body off;
}

location @login {
  internal;
  set $redirect "$scheme://$host$request_uri";
  access_by_lua_block {
    return ngx.redirect(
      "https://login.mycorp.io/login/start?" ..
      "d="  .. ngx.escape_uri(ngx.var.host) ..
      "&r=" .. ngx.escape_uri(ngx.var.redirect),
      ngx.HTTP_MOVED_TEMPORARILY)
  }
}

add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Cache-Control "no-cache,no-store,must-revalidate,private" always;
add_header Pragma "no-cache" always;
